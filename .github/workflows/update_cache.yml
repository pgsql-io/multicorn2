name: Update build cache

# PostgreSQL provided by nixpkgs doesn't include PL/Python support, so we have to build it ourselves (in flake.nix).  In
# fact, we have to build it once for every version of Python that we want to run tests against.  That's pretty slow.
#
# In order to speed up the tests, we build all the supported versions of PostgreSQL with PL/Python support and push them
# to a nix binary cache.
#
# However GitHub Actions (wisely) doesn't allow access to secrets in pull requests, so we can't push to the cache from
# the test runs.  Instead, we push to the cache from this workflow, which is triggered manually, and triggered on
# changes to flake.nix & flake.lock in the main branch push.  This should keep the cache up-to-date, but without running
# untrusted code with access to the secrets.

# Secrets required:
#
# AWS_ACCESS_KEY_ID & AWS_SECRET_ACCESS_KEY secrets are generated by creating a new AWS IAM user which has these
# permissions, and generating an access key for the user:
# {
#     "Version": "2012-10-17",
#     "Statement": [
#         {
#             "Sid": "VisualEditor0",
#             "Effect": "Allow",
#             "Action": [
#                 "s3:PutObject",
#                 "s3:GetObject",
#                 "s3:ListBucket"
#             ],
#             "Resource": [
#                 "arn:aws:s3:::mfenniak-multicorn2-nix-cache/*",
#                 "arn:aws:s3:::mfenniak-multicorn2-nix-cache"
#             ]
#         }
#     ]
# }
#
# NIX_CACHE_SECRET_KEY secret is generated by:
#   nix key generate-secret --key-name mfenniak-multicorn2-nix-cache > ./secret
# then "./secret" file is uploaded as secret NIX_CACHE_SECRET_KEY.  The related public key is extracted by:
#  nix show-public-key --key-file ./secret
# which then needs to be populated as the trusted_public_keys input to the setup-nix-cache-action in run_tests.yml.

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
    paths:
      - 'flake.nix'
      - 'flake.lock'

jobs:
  update_cache:
    name: Update allPostgresWithPlPython Cache
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v26
      - uses: zombiezen/setup-nix-cache-action@v0.4.0
        with:
          substituters: s3://mfenniak-multicorn2-nix-cache?region=us-west-2
          secret_keys: ${{ secrets.NIX_CACHE_SECRET_KEY }}
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      # allPostgresWithPlPython is the target that contains all the supported versions of PostgreSQL with PL/Python.
      #
      # setup-nix-cache-action will automatically copy the build result to the first substituter, so no need for a nix
      # copy after the build.
      - run: nix build .#allPostgresWithPlPython
